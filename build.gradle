plugins {
	id 'fabric-loom' version '1.4-SNAPSHOT'
	id 'maven-publish'
}

base {
	archivesName = project.archives_base_name
}

version = "${project.mod_version}+${project.minecraft_version}"
group = project.maven_group

loom {
	accessWidenerPath = file("src/main/resources/architectspalette.accesswidener")

	runs {
		datagen {
			inherit server

			name "Data Generation"
			vmArg "-Dfabric-api.datagen"
			vmArg "-Dfabric-api.datagen.output-dir=${file("src/main/generated")}"
			vmArg "-Dfabric-api.datagen.modid=${mod_id}"

			runDir "build/datagen"
		}
	}
}
assemble.dependsOn(runDatagen)
sourceSets.main.resources {
	srcDirs += 'src/main/generated'
	srcDirs += 'src/ap-assets/resources'
}

repositories {
	maven { url "https://maven.shedaniel.me/" }
	maven { url "https://maven.terraformersmc.com/"}
	maven { url 'https://maven.wispforest.io' }
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	modImplementation "io.wispforest:owo-lib:${project.owo_version}"
	annotationProcessor "io.wispforest:owo-lib:${project.owo_version}"

	modCompileOnly "dev.emi:emi-fabric:${project.emi_version}:api"
	modRuntimeOnly "dev.emi:emi-fabric:${project.emi_version}"

	modCompileOnly "me.shedaniel:RoughlyEnoughItems-api-fabric:${project.rei_version}"
	modCompileOnly "me.shedaniel:RoughlyEnoughItems-default-plugin-fabric:${project.rei_version}"
	modRuntimeOnly("me.shedaniel:RoughlyEnoughItems-fabric:${project.rei_version}") {
		exclude group: 'net.fabricmc'
	}
	modRuntimeOnly "dev.architectury:architectury-fabric:${project.architectury_version}"
}

processResources {
	duplicatesStrategy(DuplicatesStrategy.EXCLUDE)

	inputs.property "version", project.version
	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = "UTF-8"
	it.options.release = 17
}

java {
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

sourcesJar {
	duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
}

jar {
	duplicatesStrategy(DuplicatesStrategy.EXCLUDE)

	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}" }
	}
}

// Configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}
